y
KLdiv(y)
install.packages(c("digest", "flexmix"))
install.packages("gcookbook")
install.packages("automap")
install.packages("colorspace")
install.packages("dichromat")
install.packages("digest")
install.packages("flexmix")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("gstat")
install.packages("gtable")
install.packages("intervals")
install.packages("labeling")
install.packages("modeltools")
install.packages("multcomp")
install.packages("multcompView")
install.packages("munsell")
install.packages("mvtnorm")
install.packages("ggmap")
install.packages("googleVis")
install.packages("rasterVis")
install.packages("latticeDensity")
install.packages("plotKML")
library(gcookbook)
library(ggplot2)
cabbage_exp
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", colour = "black") +
scale_fill_brewer(palette = "Pastel1")
# rank function generates indicies in ascending order
# get 10 fast-growing: look for rank values higher than 40
upc <- subset(uspopchange, rank(Change)>40)
ggplot(upc, aes(x = Abb, y = Change, fill = Region)) +
geom_bar(stat = "identity")
# reorder function (x, y)  reorders Change in ascending order and
# obtains indices of Abb
ggplot(upc, aes(x = reorder(Abb, Change), y = Change, fill = Region)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("#669933", "#FFCC66")) +
xlab("State")
csub <- subset(climate, Source == "Berkeley" & Year >= 1900)
csub$pos <- csub$Anomaly10y >= 0
ggplot(csub, aes(x = Year, y = Anomaly10y, fill = pos)) +
geom_bar(stat = "identity", position = "identity")
library(ggplot2)
library(gridExtra)
data(diamonds)
head(diamonds)
diamonds <-     diamonds[diamonds$color < "J",]
#http://127.0.0.1:25615/library/ggplot2/html/diamonds.html
#Gradient Colors - Good For Continuous Scales
G5 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color)   + labs(title = "Base Plot \n" )
G6 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=rainbow(2))   + labs(title = " + scale_colour_gradientn(colours=rainbow(2)) \n" )
G7 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=c("red", "blue"))   + labs(title = " + scale_colour_gradientn(colours=c(''red'', ''blue'')) \n" )
G8 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=c("white", "dodgerblue")) + labs(title = " + scale_colour_gradientn(colours=c(''white'', ''dodgerblue'')) \n" )
Gradient2 <- grid.arrange(G5, G6, G7, G8, ncol=2)
#Load ggplot default data: Diamonds
library(ggplot2)
library(gridExtra)
data(diamonds)
head(diamonds)
dat = data.frame(x = runif(1000), y = runif(1000), cat = rep(c("A","B"), each = 500))
ggplot(aes(x = x, y = y, color = cat), data = dat) + geom_point(alpha = 0.3)
library(automap)
library(ggplot2)
library(plyr)
library(sp)
loadMeuse()
theme_set(theme_bw())
meuse = as.data.frame(meuse)
chull_per_soil = ddply(meuse, .(soil),
function(sub) sub[chull(sub$x, sub$y),c("x","y")])
ggplot(aes(x = x, y = y), data = meuse) +
geom_point(aes(size = log(zinc), color = ffreq)) +
geom_polygon(aes(color = soil), data = chull_per_soil, fill = NA) +
coord_equal()
install.packages(c("flexclust", "gdata", "gtools", "maptools", "plotKML", "raster", "RODBC", "sp", "spdep"))
library(flexclust)
data(Nclus)
set.seed(1)
c5 <- cclust(Nclus, 5, save.data=TRUE)
c5
plot(c5)
Nclus
fix(`B1`)
data(Nclus)
set.seed(1)
c5 <- cclust(Nclus, 5, save.data=TRUE)
c5
plot(c5)
setwd("~/GitHub/ComputerActivites")
data = read.csv('work_computerusage_07102013.csv')
data
data.Start
data%Start
data$Start
data$Start[1]
data$Start[1,1]
data$Start[[1]]
data$Start = droplevels(data$Start)
data$Start
data$Start = droplevels(data$Start)
test = droplevels(data$Start)
test
uncell(data$Start)
decell(data$Start)
delist(data$Start)
unlist(data$Start)
droplevels(data, data$Start)
data$Start
data = droplevels(data, data$Start)
data
data$Start
data$Start[2]
droplevels?
)
?droplevels
class(data$Start[2])
bob <- data.frame(lapply(data, as.character), stringsAsFactors=FALSE)
bob
bob$Start
bob$Start[1]
bob$Start[1][1,5]
bob$Start[1][1:5]
bob$Start[1](1:5)
stringTest = bob$Start[1]
stringTest
class(stringTest)
stringTest[1]
stringTest['1']
stringTest(1)
substr(stringTest, 11, end)
substr(stringTest, 11, 15)
substr(stringTest, 11, 17)
time = substr(stringTest, 11, 17)
strptime(time,  "%T")
strptime(time,  "%X")
time2 = strptime(time,  "%X")
class(time2)
time
time2 = strptime(time,  "%k")
time2
time2 = strptime(time,  "%X", usetz = FALSE)
time2 = strptime(time, format = %X, usetz = FALSE)
install.packages(c("dismo", "Hmisc", "munsell", "raster"))
install.packages("lubridate")
library(lubridate)
as.period(time)
time
t = as.POSIXt(time)
t = as.POSIct(time)
t = as.POSIXt(time)
t = as.POSIXct(time)
t = as.POSIXct(time)
t = as.POSIXlt(time)
time
time2 = "7:39:04"
interval(time, time2)
as.duration(time, time2)
dseconds(1)
dseconds(45)
dseconds(100)
dminutes(100)
as.POSIXlt(time, format = %H:"%M:%S")
as.POSIXlt(time, format = "%H:%M:%S")
stringTest[1]
stringTest
as.POSIXlt(stringTest, format = "%H:%M:%S")
as.POSIXlt(stringTest, format = "%H:%M:%S")
as.POSIXct(strptime(stringTest, "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S"))
str_replace_all(stringTest,"/","-")
library(stringr)
str_replace_all(stringTest,"/","-")
as.POSIXct(strptime(stringTest, "%Y-%m-%d %H:%M:%S"))
stringTest = str_replace_all(stringTest,"/","-")
stringTest
as.POSIXct(strptime(stringTest, "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime(stringTest, "%m-%d-%Y %H:%M:%S"))
stringtest = bob$Start[1]
stringtest
as.POSIXct(strptime(stringTest, "%m/%d/%Y %H:%M:%S"))
library(ggplot2)
cmr <- read.table ('http://pastebin.com/raw.php?i=61J9W4Gt', header = T)
str(cmr)
#ordering factors
cmr$height <- factor(cmr$height, levels = c('h','m','l'))
cmr$Pulse <- factor (cmr$Pulse, levels = c("1LF_Low_Short",
"2PF_Low_Short", "2PF_Medium_Medium",
"3GF_Medium_Short","3GF_Medium_Long"))
#plot
ggplot(cmr, aes( height , variable,
colour = factor(pop, levels = pop[order(factor(Pulse))]),
fill = factor(Pulse)))+
xlab ('Anther levels')+
ylab ('Length (mm)')+
scale_colour_manual( values = rep("black", 24), legend = FALSE) +
scale_fill_manual(name = 'Flood Pulse intensity', values =
c("#E5E5E5", "#ACACAC", "#747474", "#3B3B3B", "#030303"))+
geom_boxplot(mapping = NULL, data = NULL, stat = "boxplot", position =
"dodge", outlier.colour = "black",
outlier.shape = 8, outlier.size = 1.5, notch = FALSE, notchwidth =
0.5, show_guide = TRUE)+
theme_bw()
ggplot(InsectSprays, aes(x = spray, y = count)) + geom_boxplot()
ggplot(InsectSprays, aes(x = reorder(spray, count, FUN=median), y = count)) + geom_boxplot()
debug('Extract_Work_Behavior')
debug('Extract_Work_Behavior.R')
debug(Extract_Work_Behavior)
foo = function(x){
if(x > 0) salutation = "Hello" else
salutation = "Goodbye"
salutation
}
debug(foo)
debug(foo)
foo
debugonce(foo)
getwd()
dir
dir()
ls()
fileList = dir()
library(stringr)
test = fileList[1]
test
test = fileList[2]
test
test = fileList[10]
test
test = fileList[20]
test
test = fileList[25]
test
test[3:4]
test = "test"
str_sub(test, 1, 2)
test = fileList[25]
str_sub(test, 10, 18)
str_sub(test, 18, 24)
str_sub(test, 19, 26)
fileL = 1
str_detect(fileList[fileL], 'applications')
fileL = 20
str_detect(fileList[fileL], 'applications')
fileList[fileL]
fileL = 28
fileList[fileL]
str_detect(fileList[fileL], 'applications')
dates = list()
appIndex = None
appCount = 1
for(fileL in seq.along(fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = str_sub(test, 19, 26)
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = str_sub(test, 19, 26)
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dates
appIndex
fileList
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = str_sub(fileList[fileL], 19, 26)
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dates
library(lubridate)
install.packages(c("class", "devtools", "evaluate", "gdata", "gplots", "gtools", "ks", "maptools", "MASS", "mclust", "munsell", "nlme", "nnet", "party", "rgl", "RODBC", "sp", "spatial", "spdep"))
install.packages("lubridate")
library(lubridate)
dates[1]
dates[[1]]
mdy(dates[[1]])
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = str_sub(fileList[fileL], 19, 26)
dateConvert = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dateConvert
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = str_sub(fileList[fileL], 19, 26)
dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dateConvert
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = mdy(str_sub(fileList[fileL], 19, 26))
#    dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dates
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = mdy(unlist(str_sub(fileList[fileL], 19, 26)))
#    dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dates
str_sub(fileList[fileL], 19, 26)
application
fileL = 28
str_sub(fileList[fileL], 19, 26)
mdy(str_sub(fileList[fileL], 19, 26))
fileList = dir()
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = mdy(str_sub(fileList[fileL], 19, 26))
dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
warnings()
dates
dateConvert
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = mdy(str_sub(fileList[[fileL]], 19, 26))
dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dateConvert
dates
fileList[fileL]
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = mdy(str_sub(fileList[fileL], 19, 26))
dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
dates
for(file.2load in appCount){
print file.2load
}
for(file.2load in appCount){
print file.2load
}
for(file.2load in appCount){
print(file.2load)
}
for(file.2load in 1:appCount){
print(file.2load)
}
fileList
file.2load = 1
appIndex[file.2load]
fileList[appIndex[file.2load]]
dayDFs = list()
for(file.2load in 1:appCount){
dayDFS[file.2load] = read.csv(fileList[appIndex[file.2load]])
}
dayDFs = list()
for(file.2load in 1:appCount){
dayDFs[file.2load] = read.csv(fileList[appIndex[file.2load]])
}
fix(dayDFs)
dayDFs[1]
dayDFs[[1]]
fileList[appIndex[file.2load]]
file.2load = 1
fileList[appIndex[file.2load]]
test = read.csv(fileList[appIndex[file.2load]])
test
dayDFs = NULL
for(file.2load in 1:appCount){
dayDFs = read.csv(fileList[appIndex[file.2load]])
}
dayDFs = NULL
for(file.2load in 1:appCount){
dayDFs = read.csv(fileList[appIndex[file.2load]])
}
file.2load = 1
dayDFs = read.csv(fileList[appIndex[file.2load]])
dayDFs = NULL
for(file.2load in 1:appCount){
#  dayDFs = read.csv(fileList[appIndex[file.2load]])
print(fileList[appIndex[file.2load]])
}
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = mdy(str_sub(fileList[fileL], 19, 26))
dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
library(stringr)
library(lubridate)
fileList = dir()
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = mdy(str_sub(fileList[fileL], 19, 26))
dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
fileList = dir()
dates = list()
appIndex = NULL
appCount = 1
for(fileL in seq(along = fileList)) {
application = str_detect(fileList[fileL], 'applications')
if(application){
dates[appCount] = str_sub(fileList[fileL], 19, 26)
dateConvert[appCount] = mdy(dates[[appCount]])
appIndex[appCount] = fileL
appCount = appCount + 1
}
}
len(appIndex)
length(appIndex)
dayDFs = NULL
for(file.2load in 1:length(appIndex)){
#  dayDFs = read.csv(fileList[appIndex[file.2load]])
print(fileList[appIndex[file.2load]])
}
View(test2)
head(test2)
library(ggplot2)
library(reshape2)
library(raster)
install.packages("raster")
install.packages("rgdal")
library(raster)
library(rgdal)
image <- stack('~/EEEI_contest/all_layers.tif')
ras <- raster('~/GIS/IEEE_contest_2013/2013_IEEE_GRSS_DF_Contest/raster.tif',
verbose = T)
source("http://pastebin.com/raw.php?i=JVyTrYRD")
objects()
devium.gui()
