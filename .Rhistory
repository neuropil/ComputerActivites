data <- iris
iris
test <- which(data, data$Sepal.Width > 4)
test <- which(data$Sepal.Width > 4)
test
data[test]
data[test,]
test <- data[which(data$Sepal.with > 4),]
test <- which(data$Sepal.Width > 4)
test2 <- data[which(data$Sepal.with > 4),]
test <- which(data$Sepal.Width > 4)
test2 <- data[which(data$Sepal.Width > 4),]
rstudio::viewData(test2)
fix(test)
test3 <- data[(data$Sepal.Width > 4),]
test2
test3
install.packages("gcookbook")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge")
library(gcookbook)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
cabbage_exp
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", colour = "black") +
scale_fill_brewer(palette = "Pastel1")
uspopchange
rank(Change)>40
rank(uspopchange$Change)>40
upc <- subset(uspopchange, rank(Change)>40)
upc
rank(uspopchange$Change)
uspopchange$Change
rank(uspopchange$Change)
ggplot(upc, aes(x = reorder(Abb, Change), y = Change, fill = Region)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("#669933", "#FFCC66")) +
xlab("State")
upc$Change
reorder(upc$Abb, upc$Change)
ggplot(upc, aes(x = Abb, y = Change, fill = Region)) +
geom_bar(stat = "identity")
csub <- subset(climate, Source == "Berkeley" & Year >= 1900)
csub
csub$pos <- csub$Anomaly10y >= 0
csub
ggplot(csub, aes(x = Year, y = Anomaly10y, fill = pos)) +
geom_bar(stat = "identity", position = "identity")
library(ggplot2)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
data(diamonds)
head(diamonds)
diamonds <-     diamonds[diamonds$color < "J",]
#http://127.0.0.1:25615/library/ggplot2/html/diamonds.html
#Gradient Colors - Good For Continuous Scales
G5 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color)   + labs(title = "Base Plot \n" )
G6 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=rainbow(2))   + labs(title = " + scale_colour_gradientn(colours=rainbow(2)) \n" )
G7 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=c("red", "blue"))   + labs(title = " + scale_colour_gradientn(colours=c(''red'', ''blue'')) \n" )
G8 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=c("white", "dodgerblue")) + labs(title = " + scale_colour_gradientn(colours=c(''white'', ''dodgerblue'')) \n" )
Gradient2 <- grid.arrange(G5, G6, G7, G8, ncol=2)
B1 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Set1")   + labs(title = "Palette=''Set1''\n" )
B2 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Set2") + labs(title = "Palette=''Set2''\n" )
B3 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Paired")   + labs(title = "Palette=''Paired''\n" )
B4 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Pastel2") + labs(title = "Palette=''Pastel2''\n" )
Brewers <- grid.arrange(B1, B2, B3, B4, ncol=2)
B5 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Blues")   + labs(title = "Palette=''Blues''\n" )
B6 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Oranges") + labs(title = "Palette=''Oranges''\n" )
B7 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Reds")   + labs(title = "Palette=''Reds''\n" )
B8 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="Purples") + labs(title = "Palette=''Purples''\n" )
Brewers.2 <- grid.arrange(B5, B6, B7, B8, ncol=2)
B9 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="RdYlGn")   + labs(title = "Palette=''RdYlGn''\n" )
B10 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="RdBu") + labs(title = "Palette=''RdBu''\n" )
B11 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="PRGn")   + labs(title = "Palette=''PRGn''\n" )
B12 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=color)
) + facet_wrap(~color) + scale_colour_brewer(palette="BrBg") + labs(title = "Palette=''BrBg''\n" )
Brewers.3 <- grid.arrange(B9, B10, B11, B12, ncol=2)
install.packages("flexmix")
library(flexmix)
x <- seq(-3, 3, length=200)
y <- cbind(u=dunif(x), n=dnorm(x), t=dt(x, df=10))
matplot(x, y, type="l")
x
y
KLdiv(y)
install.packages(c("digest", "flexmix"))
install.packages("gcookbook")
install.packages("automap")
install.packages("colorspace")
install.packages("dichromat")
install.packages("digest")
install.packages("flexmix")
install.packages("flexclust")
install.packages("ggplot2")
install.packages("gridExtra")
install.packages("gstat")
install.packages("gtable")
install.packages("intervals")
install.packages("labeling")
install.packages("modeltools")
install.packages("multcomp")
install.packages("multcompView")
install.packages("munsell")
install.packages("mvtnorm")
install.packages("ggmap")
install.packages("googleVis")
install.packages("rasterVis")
install.packages("latticeDensity")
install.packages("plotKML")
library(gcookbook)
library(ggplot2)
cabbage_exp
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge")
ggplot(cabbage_exp, aes(x = Date, y = Weight, fill = Cultivar)) +
geom_bar(position = "dodge", colour = "black") +
scale_fill_brewer(palette = "Pastel1")
# rank function generates indicies in ascending order
# get 10 fast-growing: look for rank values higher than 40
upc <- subset(uspopchange, rank(Change)>40)
ggplot(upc, aes(x = Abb, y = Change, fill = Region)) +
geom_bar(stat = "identity")
# reorder function (x, y)  reorders Change in ascending order and
# obtains indices of Abb
ggplot(upc, aes(x = reorder(Abb, Change), y = Change, fill = Region)) +
geom_bar(stat = "identity", colour = "black") +
scale_fill_manual(values = c("#669933", "#FFCC66")) +
xlab("State")
csub <- subset(climate, Source == "Berkeley" & Year >= 1900)
csub$pos <- csub$Anomaly10y >= 0
ggplot(csub, aes(x = Year, y = Anomaly10y, fill = pos)) +
geom_bar(stat = "identity", position = "identity")
library(ggplot2)
library(gridExtra)
data(diamonds)
head(diamonds)
diamonds <-     diamonds[diamonds$color < "J",]
#http://127.0.0.1:25615/library/ggplot2/html/diamonds.html
#Gradient Colors - Good For Continuous Scales
G5 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color)   + labs(title = "Base Plot \n" )
G6 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=rainbow(2))   + labs(title = " + scale_colour_gradientn(colours=rainbow(2)) \n" )
G7 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=c("red", "blue"))   + labs(title = " + scale_colour_gradientn(colours=c(''red'', ''blue'')) \n" )
G8 <- ggplot(data = diamonds ) + geom_point(aes( x = carat, y = price, color=price)
) + facet_wrap(~color) + scale_colour_gradientn(colours=c("white", "dodgerblue")) + labs(title = " + scale_colour_gradientn(colours=c(''white'', ''dodgerblue'')) \n" )
Gradient2 <- grid.arrange(G5, G6, G7, G8, ncol=2)
#Load ggplot default data: Diamonds
library(ggplot2)
library(gridExtra)
data(diamonds)
head(diamonds)
dat = data.frame(x = runif(1000), y = runif(1000), cat = rep(c("A","B"), each = 500))
ggplot(aes(x = x, y = y, color = cat), data = dat) + geom_point(alpha = 0.3)
library(automap)
library(ggplot2)
library(plyr)
library(sp)
loadMeuse()
theme_set(theme_bw())
meuse = as.data.frame(meuse)
chull_per_soil = ddply(meuse, .(soil),
function(sub) sub[chull(sub$x, sub$y),c("x","y")])
ggplot(aes(x = x, y = y), data = meuse) +
geom_point(aes(size = log(zinc), color = ffreq)) +
geom_polygon(aes(color = soil), data = chull_per_soil, fill = NA) +
coord_equal()
install.packages(c("flexclust", "gdata", "gtools", "maptools", "plotKML", "raster", "RODBC", "sp", "spdep"))
library(flexclust)
data(Nclus)
set.seed(1)
c5 <- cclust(Nclus, 5, save.data=TRUE)
c5
plot(c5)
Nclus
fix(`B1`)
data(Nclus)
set.seed(1)
c5 <- cclust(Nclus, 5, save.data=TRUE)
c5
plot(c5)
setwd("~/GitHub/ComputerActivites")
data = read.csv('work_computerusage_07102013.csv')
data
data.Start
data%Start
data$Start
data$Start[1]
data$Start[1,1]
data$Start[[1]]
data$Start = droplevels(data$Start)
data$Start
data$Start = droplevels(data$Start)
test = droplevels(data$Start)
test
uncell(data$Start)
decell(data$Start)
delist(data$Start)
unlist(data$Start)
droplevels(data, data$Start)
data$Start
data = droplevels(data, data$Start)
data
data$Start
data$Start[2]
droplevels?
)
?droplevels
class(data$Start[2])
bob <- data.frame(lapply(data, as.character), stringsAsFactors=FALSE)
bob
bob$Start
bob$Start[1]
bob$Start[1][1,5]
bob$Start[1][1:5]
bob$Start[1](1:5)
stringTest = bob$Start[1]
stringTest
class(stringTest)
stringTest[1]
stringTest['1']
stringTest(1)
substr(stringTest, 11, end)
substr(stringTest, 11, 15)
substr(stringTest, 11, 17)
time = substr(stringTest, 11, 17)
strptime(time,  "%T")
strptime(time,  "%X")
time2 = strptime(time,  "%X")
class(time2)
time
time2 = strptime(time,  "%k")
time2
time2 = strptime(time,  "%X", usetz = FALSE)
time2 = strptime(time, format = %X, usetz = FALSE)
install.packages(c("dismo", "Hmisc", "munsell", "raster"))
install.packages("lubridate")
library(lubridate)
as.period(time)
time
t = as.POSIXt(time)
t = as.POSIct(time)
t = as.POSIXt(time)
t = as.POSIXct(time)
t = as.POSIXct(time)
t = as.POSIXlt(time)
time
time2 = "7:39:04"
interval(time, time2)
as.duration(time, time2)
dseconds(1)
dseconds(45)
dseconds(100)
dminutes(100)
as.POSIXlt(time, format = %H:"%M:%S")
as.POSIXlt(time, format = "%H:%M:%S")
stringTest[1]
stringTest
as.POSIXlt(stringTest, format = "%H:%M:%S")
as.POSIXlt(stringTest, format = "%H:%M:%S")
as.POSIXct(strptime(stringTest, "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime("2011-03-27 01:30:00", "%Y-%m-%d %H:%M:%S"))
str_replace_all(stringTest,"/","-")
library(stringr)
str_replace_all(stringTest,"/","-")
as.POSIXct(strptime(stringTest, "%Y-%m-%d %H:%M:%S"))
stringTest = str_replace_all(stringTest,"/","-")
stringTest
as.POSIXct(strptime(stringTest, "%Y-%m-%d %H:%M:%S"))
as.POSIXct(strptime(stringTest, "%m-%d-%Y %H:%M:%S"))
stringtest = bob$Start[1]
stringtest
as.POSIXct(strptime(stringTest, "%m/%d/%Y %H:%M:%S"))
